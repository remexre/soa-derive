var searchIndex = JSON.parse('{\
"soa_derive_example":{"doc":"This crate is an example for the <code>soa_derive</code> crate …","tn":["Particle","ParticlePtr","ParticlePtrMut","ParticleRef","ParticleRefMut","ParticleSlice","ParticleSliceMut","ParticleVec","add","add","append","as_mut","as_mut","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_slice","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","from_raw_parts","from_raw_parts","from_raw_parts_mut","get","get","get","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","index","index","index","index_mut","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","is_empty","is_null","is_null","iter","iter","iter","iter_mut","iter_mut","kind","kind","kind","kind","kind","kind","kind","kind","last","last_mut","len","len","len","mass","mass","mass","mass","mass","mass","mass","mass","name","name","name","name","name","name","name","name","ne","ne","ne","ne","ne","ne","ne","ne","new","offset","offset","pop","position","position","position","position","position","position","position","position","push","read","read","read_unaligned","read_unaligned","read_volatile","read_volatile","reborrow","reborrow","remove","reserve","reserve_exact","retain","shrink_to_fit","slice","slice_mut","split_at","split_at_mut","split_first","split_first_mut","split_last","split_last_mut","split_off","sub","sub","swap","swap_remove","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","wrapping_add","wrapping_add","wrapping_offset","wrapping_offset","wrapping_sub","wrapping_sub","write","write_unaligned","write_volatile"],"q":["soa_derive_exampled":["A basic Particle type","An analog of a pointer to <code>Particle</code> with struct of array …","An analog of a mutable pointer to <code>Particle</code> with struct of …","A reference to a <code>Particle</code> with struct of array layout.","A mutable reference to a <code>Particle</code> with struct of array …","A slice of <code>Particle</code> inside a <code>ParticleVec</code> .","A mutable slice of <code>Particle</code> inside a <code>ParticleVec</code> .","An analog to <code>Vec<Particle>\\n</code> with Struct of Array (SoA) …","Similar to <code>*const T::add()</code>, with the same safety caveats.","Similar to <code>*mut T::add()</code>, with the same safety caveats.","Similar to <code> Vec<Particle> ::append()</code>.","Similar to <code>*mut T::as_mut()</code>, with the same safety caveats.","Create a <code>ParticleRefMut</code> from a mutably borrowed <code>Particle</code> .","Similar to <code> Vec<Particle> ::as_mut_ptr()</code>.","Convert a <code>ParticleRefMut</code> to a <code>ParticlePtrMut</code> ; <em>i.e.</em> do a …","Convert a <code>ParticlePtr</code> to a <code>ParticlePtrMut</code> ; <em>i.e.</em> do a …","Similar to <code> [Particle] ::as_mut_ptr()</code>.","Similar to <code> Vec<Particle> ::as_mut_slice()</code>.","Similar to <code> Vec<Particle> ::as_ptr()</code>.","Convert a <code>ParticleRef</code> to a <code>ParticlePtr</code> ; <em>i.e.</em> do a …","Convert a <code>ParticleRefMut</code> to a <code>ParticlePtr</code> ; <em>i.e.</em> do a …","Convert a <code>ParticlePtrMut</code> to a <code>ParticlePtr</code> ; <em>i.e.</em> do a …","Similar to <code> [Particle] ::as_ptr()</code>.","Similar to <code> [Particle] ::as_ptr()</code>.","Similar to <code>*const T::as_ref()</code>, with the same safety …","Similar to <code>*mut T::as_ref()</code>, with the same safety caveats.","Convert a <code>ParticleSliceMut</code> to a <code>ParticleSlice</code> in order to …","Create a <code>ParticleRef</code> from a borrowed <code>Particle</code> .","Similar to <code> Vec<Particle> ::as_slice()</code>.","Returns a non-mutable slice from this mutable slice.","","","","","","","","","","","","","","","","","Similar to <code> Vec<Particle> ::capacity()</code>, the capacity of …","Similar to <code> Vec<Particle> ::clear()</code>.","","","","","","","","","","","","","","","","","Similar to <code> [Particle] ::first()</code>.","Similar to <code> [Particle] ::first_mut()</code>.","","","","","","","","","","","","","","","","","","Similar to <code> Vec<Particle> ::from_raw_parts()</code>.","Similar to <code>std::slice::from_raw_parts()</code>.","Similar to <code>std::slice::from_raw_parts_mut()</code>.","Similar to <code> Vec<Particle> ::get<I>()</code>.","Similar to <code> [Particle] ::get()</code>.","Similar to <code> [Particle] ::get()</code>.","Similar to <code> Vec<Particle> ::get_mut<I>()</code>.","Similar to <code> [Particle] ::get_mut()</code>.","Similar to <code> Vec<Particle> ::get_unchecked<I>()</code>.","Similar to <code> [Particle] ::get_unchecked()</code>.","Similar to <code> [Particle] ::get_unchecked()</code>.","Similar to <code> Vec<Particle> ::get_unchecked_mut<I>()</code>.","Similar to <code> [Particle] ::get_unchecked_mut()</code>.","Similar to <code> Vec<Particle> ::index<I>()</code>.","Similar to <code>std::ops::Index</code> trait on Particle . This is …","Similar to <code>std::ops::Index</code> trait on Particle . This is …","Similar to <code> Vec<Particle> ::index_mut<I>()</code>.","Similar to <code>std::ops::IndexMut</code> trait on Particle . This is …","Similar to <code> Vec<Particle> ::insert()</code>.","","","","","","","","","","","Similar to <code> Vec<Particle> ::is_empty()</code>, all the fields …","Similar to <code> [Particle] ::is_empty()</code>, the length of all …","Similar to <code> [Particle] ::is_empty()</code>, the length of all …","Similar to <code>*const T::is_null()</code>.","Similar to <code>*mut T::is_null()</code>.","Get an iterator over the <code>ParticleRef</code> in this vector","Get an iterator over the <code>ParticleRef</code> in this slice.","Get an iterator over the <code>ParticleRef</code> in this vector","Get a mutable iterator over the <code>ParticleRefMut</code> in this …","Get a mutable iterator over the <code>ParticleRefMut</code> in this …","A vector of <code>kind</code> from a <code>Particle</code>","A reference to a <code>kind</code> from a <code>ParticleVec</code>","A mutable reference to a <code>kind</code> from a <code>ParticleVec</code>","A pointer to a <code>kind</code> from a <code>ParticleVec</code>","A mutable pointer to a <code>kind</code> from a <code>ParticleVec</code>","A slice of <code>kind</code> from a <code>ParticleVec</code>","A mutable slice of <code>kind</code> from a <code>ParticleVec</code>","Kind of the particle","Similar to <code> [Particle] ::last()</code>.","Similar to <code> [Particle] ::last_mut()</code>.","Similar to <code> Vec<Particle> ::len()</code>, all the fields should …","Similar to <code> [Particle] ::len()</code>, the length of all fields …","Similar to <code> [Particle] ::len()</code>, the length of all fields …","A vector of <code>mass</code> from a <code>Particle</code>","A reference to a <code>mass</code> from a <code>ParticleVec</code>","A mutable reference to a <code>mass</code> from a <code>ParticleVec</code>","A pointer to a <code>mass</code> from a <code>ParticleVec</code>","A mutable pointer to a <code>mass</code> from a <code>ParticleVec</code>","A slice of <code>mass</code> from a <code>ParticleVec</code>","A mutable slice of <code>mass</code> from a <code>ParticleVec</code>","Mass of the particle","A vector of <code>name</code> from a <code>Particle</code>","A reference to a <code>name</code> from a <code>ParticleVec</code>","A mutable reference to a <code>name</code> from a <code>ParticleVec</code>","A pointer to a <code>name</code> from a <code>ParticleVec</code>","A mutable pointer to a <code>name</code> from a <code>ParticleVec</code>","A slice of <code>name</code> from a <code>ParticleVec</code>","A mutable slice of <code>name</code> from a <code>ParticleVec</code>","Name of the particle","","","","","","","","","Similar to <code> Vec<Particle> ::new()</code>","Similar to <code>*const T::offset()</code>, with the same safety …","Similar to <code>*mut T::offset()</code>, with the same safety caveats.","Similar to <code> Vec<Particle> ::pop()</code>.","A vector of <code>position</code> from a <code>Particle</code>","A reference to a <code>position</code> from a <code>ParticleVec</code>","A mutable reference to a <code>position</code> from a <code>ParticleVec</code>","A pointer to a <code>position</code> from a <code>ParticleVec</code>","A mutable pointer to a <code>position</code> from a <code>ParticleVec</code>","A slice of <code>position</code> from a <code>ParticleVec</code>","A mutable slice of <code>position</code> from a <code>ParticleVec</code>","Position of the particle","Similar to <code> Vec<Particle> ::push()</code>.","Similar to <code>*const T::read()</code>, with the same safety caveats.","Similar to <code>*mut T::read()</code>, with the same safety caveats.","Similar to <code>*const T::read_unaligned()</code>, with the same …","Similar to <code>*mut T::read_unaligned()</code>, with the same safety …","Similar to <code>*const T::read_volatile()</code>, with the same …","Similar to <code>*mut T::read_volatile()</code>, with the same safety …","Reborrows the slices in a narrower lifetime","Reborrows the slices in a narrower lifetime","Similar to <code> Vec<Particle> ::remove()</code>.","Similar to <code> Vec<Particle> ::reserve()</code>, reserving the same …","Similar to <code> Vec<Particle> ::reserve_exact()</code> reserving the …","Similar to <code> Vec<Particle> ::retain()</code>.","Similar to <code> Vec<Particle> ::shrink_to_fit()</code> shrinking all …","Create a slice of this vector matching the given <code>range</code>. …","Create a mutable slice of this vector matching the given …","Similar to <code> [Particle] ::split_at()</code>.","Similar to <code> [Particle] ::split_at_mut()</code>.","Similar to <code> [Particle] ::split_first()</code>.","Similar to <code> [Particle] ::split_first_mut()</code>.","Similar to <code> [Particle] ::split_last()</code>.","Similar to <code> [Particle] ::last_mut()</code>.","Similar to <code> Vec<Particle> ::split_off()</code>.","Similar to <code>*const T::sub()</code>, with the same safety caveats.","Similar to <code>*mut T::sub()</code>, with the same safety caveats.","Similar to <code> [Particle] ::swap()</code>.","Similar to <code> Vec<Particle> ::swap_remove()</code>.","","","","","Similar to <code> Vec<Particle> ::truncate()</code> truncating all …","","","","","","","","","","","","","","","","","","","","","","","","","Similar to <code> Vec<Particle> ::with_capacity()</code>, initializing …","Similar to <code>*const T::wrapping_add()</code>.","Similar to <code>*mut T::wrapping_add()</code>, with the same safety …","Similar to <code>*const T::offset()</code>.","Similar to <code>*mut T::wrapping_offset()</code>","Similar to <code>*const T::wrapping_sub()</code>.","Similar to <code>*mut T::wrapping_sub()</code>, with the same safety …","Similar to <code>*mut T::write()</code>, with the same safety caveats.","Similar to <code>*mut T::write_unaligned()</code>, with the same …","Similar to <code>*mut T::write_volatile()</code>, with the same safety …"],"i":[0,0,0,0,0,0,0,0,1,2,3,2,4,3,5,1,6,3,3,7,5,2,8,6,1,2,6,4,3,6,3,7,5,1,2,8,6,4,3,7,5,1,2,8,6,4,3,3,7,1,2,8,7,1,2,8,3,7,5,1,2,8,6,4,8,6,3,7,5,1,2,8,6,4,3,7,5,1,2,8,6,4,3,3,8,6,3,8,6,3,6,3,8,6,3,6,3,8,6,3,6,3,3,7,5,1,2,8,6,4,8,6,3,8,6,1,2,3,8,6,3,6,3,7,5,1,2,8,6,4,8,6,3,8,6,3,7,5,1,2,8,6,4,3,7,5,1,2,8,6,4,3,7,5,1,2,8,6,4,3,1,2,3,3,7,5,1,2,8,6,4,3,1,2,1,2,1,2,8,6,3,3,3,3,3,3,3,8,6,8,6,8,6,3,1,2,6,3,7,1,2,8,3,3,7,5,1,2,8,6,4,3,7,5,1,2,8,6,4,3,7,5,1,2,8,6,4,3,1,2,1,2,1,2,2,2,2],"f":[null,null,null,null,null,null,null,null,[[["usize",15]],["particleptr",3]],[[["usize",15]],["particleptrmut",3]],[[["particlevec",3]]],[[],[["particlerefmut",3],["option",4,["particlerefmut"]]]],[[],["particlerefmut",3]],[[],["particleptrmut",3]],[[],["particleptrmut",3]],[[],["particleptrmut",3]],[[],["particleptrmut",3]],[[],["particleslicemut",3]],[[],["particleptr",3]],[[],["particleptr",3]],[[],["particleptr",3]],[[],["particleptr",3]],[[],["particleptr",3]],[[],["particleptr",3]],[[],[["particleref",3],["option",4,["particleref"]]]],[[],[["particleref",3],["option",4,["particleref"]]]],[[],["particleslice",3]],[[],["particleref",3]],[[],["particleslice",3]],[[],["particleslice",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["particleref",3]],[[],["particleptr",3]],[[],["particleptrmut",3]],[[],["particleslice",3]],[[]],[[]],[[]],[[]],[[["particlevec",3]],["bool",15]],[[["particleref",3]],["bool",15]],[[["particlerefmut",3]],["bool",15]],[[["particleptr",3]],["bool",15]],[[["particleptrmut",3]],["bool",15]],[[["particleslice",3]],["bool",15]],[[["particleslicemut",3]],["bool",15]],[[["particle",3]],["bool",15]],[[],[["particleref",3],["option",4,["particleref"]]]],[[],[["option",4,["particlerefmut"]],["particlerefmut",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["particleptrmut",3],["usize",15]],["particlevec",3]],[[["usize",15],["particleptr",3]],["particleslice",3]],[[["particleptrmut",3],["usize",15]],["particleslicemut",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["particle",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["iter",3]],[[],["iter",3]],[[],["itermut",3]],[[],["itermut",3]],null,null,null,null,null,null,null,null,[[],[["particleref",3],["option",4,["particleref"]]]],[[],[["option",4,["particlerefmut"]],["particlerefmut",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["particlevec",3]],["bool",15]],[[["particleref",3]],["bool",15]],[[["particlerefmut",3]],["bool",15]],[[["particleptr",3]],["bool",15]],[[["particleptrmut",3]],["bool",15]],[[["particleslice",3]],["bool",15]],[[["particleslicemut",3]],["bool",15]],[[["particle",3]],["bool",15]],[[],["particlevec",3]],[[["isize",15]],["particleptr",3]],[[["isize",15]],["particleptrmut",3]],[[],[["option",4,["particle"]],["particle",3]]],null,null,null,null,null,null,null,null,[[["particle",3]]],[[],["particle",3]],[[],["particle",3]],[[],["particle",3]],[[],["particle",3]],[[],["particle",3]],[[],["particle",3]],[[],["particleslice",3]],[[],["particleslicemut",3]],[[["usize",15]],["particle",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15],["range",3,["usize"]]],["particleslice",3]],[[["usize",15],["range",3,["usize"]]],["particleslicemut",3]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["particlevec",3]],[[["usize",15]],["particleptr",3]],[[["usize",15]],["particleptrmut",3]],[[["usize",15]]],[[["usize",15]],["particle",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["particlevec",3]],[[["usize",15]],["particleptr",3]],[[["usize",15]],["particleptrmut",3]],[[["isize",15]],["particleptr",3]],[[["isize",15]],["particleptrmut",3]],[[["usize",15]],["particleptr",3]],[[["usize",15]],["particleptrmut",3]],[[["particle",3]]],[[["particle",3]]],[[["particle",3]]]],"p":[[3,"ParticlePtr"],[3,"ParticlePtrMut"],[3,"ParticleVec"],[3,"Particle"],[3,"ParticleRefMut"],[3,"ParticleSliceMut"],[3,"ParticleRef"],[3,"ParticleSlice"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};